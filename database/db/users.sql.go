// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: users.sql

package database

import (
	"context"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users 
(username,email,password,full_name) VALUES (
    $1,$2,$3,$4
) RETURNING id, username, password, full_name, email, password_changed_at, created_at
`

type CreateUserParams struct {
	Username string
	Email    string
	Password string
	FullName string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.Username,
		arg.Email,
		arg.Password,
		arg.FullName,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Password,
		&i.FullName,
		&i.Email,
		&i.PasswordChangedAt,
		&i.CreatedAt,
	)
	return i, err
}

const findUserByName = `-- name: FindUserByName :one
SELECT id, username, password, full_name, email, password_changed_at, created_at FROM users
WHERE username=$1 LIMIT 1
`

func (q *Queries) FindUserByName(ctx context.Context, username string) (User, error) {
	row := q.db.QueryRowContext(ctx, findUserByName, username)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Password,
		&i.FullName,
		&i.Email,
		&i.PasswordChangedAt,
		&i.CreatedAt,
	)
	return i, err
}
